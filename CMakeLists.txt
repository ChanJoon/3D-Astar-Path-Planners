cmake_minimum_required(VERSION 2.8.3)
project(heuristic_planners)

add_compile_options(-std=c++17 -Wall -Wextra -pedantic)
add_definitions(-DROS)
# add_definitions(-DPUB_EXPLORED_NODES)
option(BUILD_DOC "Build documentation" ON)


# if(NOT DEFINED ROS)
#   message(STATUS "Compiling Algorithm Libraries without ROS features")
# else()
#   if(NOT DEFINED PUB_EXPLORED_NODES)
#     message(STATUS "Compiling Algorithm Libraries with basic ROS Features")
#   else()
#     message(STATUS "Compiling Algorithm Libraries with ROS Rviz explored nodes markers publishing")
#   endif()
# endif()

## Find catkin macros and libraries
find_package(catkin REQUIRED COMPONENTS
  std_msgs
  geometry_msgs
  nav_msgs
  visualization_msgs
  message_generation
  roscpp
  pcl_conversions
  pcl_ros
  octomap_ros
  costmap_2d
)

# check if Doxygen is installed
find_package(Doxygen)
if (DOXYGEN_FOUND)
    # set input and output files
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

    # request to configure the file
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
    message("Doxygen build started")

    # note the option ALL which allows to build the docs together with the application
    add_custom_target( doc_doxygen ALL
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM )
else (DOXYGEN_FOUND)
  message("Doxygen need to be installed to generate the doxygen documentation")
endif (DOXYGEN_FOUND)

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
  # FILES
# )

## Generate services in the 'srv' folder

add_service_files(
  FILES
  CellCostValue.srv
  GetPath.srv
  SetAlgorithm.srv
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  geometry_msgs std_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
 INCLUDE_DIRS include
 LIBRARIES PathGenerator AStarGenerator ThetaStarGenerator LazyThetaStarGenerator
  CATKIN_DEPENDS std_msgs visualization_msgs geometry_msgs nav_msgs roscpp message_runtime costmap_2d
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
add_library(PathGenerator          src/Planners/PathGenerator.cpp 
                                   src/utils/geometry_utils.cpp
                                   src/utils/heuristic.cpp
                                   src/utils/LineOfSight.cpp
                                   src/utils/utils.cpp
)
target_link_libraries(PathGenerator ${catkin_LIBRARIES})

add_library(AStarGenerator         src/Planners/AStarGenerator.cpp 
                                   src/Planners/PathGenerator.cpp
                                   src/utils/geometry_utils.cpp
                                   src/utils/heuristic.cpp
                                   src/utils/LineOfSight.cpp
                                   src/utils/utils.cpp)

target_link_libraries(AStarGenerator ${catkin_LIBRARIES})

add_library(ThetaStarGenerator     src/Planners/ThetaStarGenerator.cpp 
                                   src/Planners/AStarGenerator.cpp 
                                   src/Planners/PathGenerator.cpp
                                   src/utils/geometry_utils.cpp
                                   src/utils/heuristic.cpp
                                   src/utils/LineOfSight.cpp
                                   src/utils/utils.cpp)

target_link_libraries(ThetaStarGenerator ${catkin_LIBRARIES})

add_library(LazyThetaStarGenerator src/Planners/LazyThetaStarGenerator.cpp 
                                   src/Planners/ThetaStarGenerator.cpp 
                                   src/Planners/AStarGenerator.cpp 
                                   src/Planners/PathGenerator.cpp
                                   src/utils/geometry_utils.cpp
                                   src/utils/heuristic.cpp
                                   src/utils/LineOfSight.cpp
                                   src/utils/utils.cpp)
                                   
target_link_libraries(LazyThetaStarGenerator ${catkin_LIBRARIES})

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(planner_ros_node src/ROS/planner_ros_node.cpp 
                                src/Planners/AStarGenerator.cpp
                                src/Planners/ThetaStarGenerator.cpp
                                src/Planners/LazyThetaStarGenerator.cpp
                                src/Planners/PathGenerator.cpp
                                src/utils/utils.cpp
                                src/utils/geometry_utils.cpp
                                src/utils/heuristic.cpp
                                src/utils/LineOfSight.cpp
                                src/Grid3D/gridMap.cpp)

# add_executable(grid3d_ros_node src/ROS/grid3d_ros_node.cpp)
## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
add_dependencies(planner_ros_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
# add_dependencies(grid3d_ros_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
## Specify libraries to link a library or executable target against
target_link_libraries(planner_ros_node ${catkin_LIBRARIES} )
# target_link_libraries(grid3d_ros_node ${catkin_LIBRARIES} )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
install(TARGETS planner_ros_node PathGenerator AStarGenerator ThetaStarGenerator LazyThetaStarGenerator
 ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
 LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
 RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.hpp"
)

## Mark other files for installation (e.g. launch and bag files, etc.)

install(DIRECTORY launch/ DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/launch)
install(DIRECTORY rviz/ DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/rviz)
install(DIRECTORY resources/ DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/resources)

